[
    {
        "user": "Honey",
        "password": "123",
        "phone": "12345678"
    },
    {
        "user": "John",
        "password": "zxc",
        "phone": "well"
    }
]
### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------


### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------


### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------


### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------


### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------


### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------


### 文件操作

PageCache Mmap(内存映射) DirectByteBuffer(堆外缓存)
顺序读写 随记读写

### 文件IO
普通IO
	面向字节流的传统IO
	FileWrite FileReader

文件通道FileChannel
	FileChannel
	FileChannel fileChannel = new RandomAccessFile(new File("db.data"), "rw").getChannel();

内存映射 Mmap
	Map耙耳朵By特BufferMap耙耳朵By特Buffer= fileChannel.map(FileChannel.MapMode.Read_write, 0, fileChannel.size())


FileChannel和Mmap的区别?

FileChannel为什么比传统IO要快呢
因为他用了ByteBuffer内存缓冲区, 实际在一次写入4kb的整数倍时能发挥最大性能
具体多少，视磁盘而定, benchmark
快的奥秘就是ByteBuffer, 在ByteBuffer中, 内存和磁盘隔了一层PageCache

内存 - PageCache - 磁盘

-----------------------------

